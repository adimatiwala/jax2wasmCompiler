HloModule jit_model, is_scheduled=true, entry_computation_layout={(f32[])->f32[]}, allow_spmd_sharding_propagation_to_parameters={true}, allow_spmd_sharding_propagation_to_output={true}

%fused_computation (param_0.1: f32[]) -> f32[] {
  %param_0.1 = f32[] parameter(0)
  %sine.1 = f32[] sine(%param_0.1), metadata={op_name="jit(model)/jit(main)/jit(model)/sin" source_file="/Users/adityamatiwala/github/jax2wasmCompiler/src/jax2hlo.py" source_line=20}
  %constant.1 = f32[] constant(-1)
  %multiply.1 = f32[] multiply(%sine.1, %constant.1), metadata={op_name="jit(model)/jit(main)/jit(model)/mul" source_file="/Users/adityamatiwala/github/jax2wasmCompiler/src/jax2hlo.py" source_line=20}
  %cosine.1 = f32[] cosine(%param_0.1), metadata={op_name="jit(model)/jit(main)/jit(model)/cos" source_file="/Users/adityamatiwala/github/jax2wasmCompiler/src/jax2hlo.py" source_line=20}
  ROOT %add.1 = f32[] add(%multiply.1, %cosine.1), metadata={op_name="jit(model)/jit(main)/jit(model)/add_any" source_file="/Users/adityamatiwala/github/jax2wasmCompiler/src/jax2hlo.py" source_line=20}
}

ENTRY %main.10 (Arg_0.1: f32[]) -> f32[] {
  %Arg_0.1 = f32[] parameter(0), metadata={op_name="x"}
  ROOT %cosine_add_fusion = f32[] fusion(%Arg_0.1), kind=kLoop, calls=%fused_computation, metadata={op_name="jit(model)/jit(main)/jit(model)/add_any" source_file="/Users/adityamatiwala/github/jax2wasmCompiler/src/jax2hlo.py" source_line=20}
}

